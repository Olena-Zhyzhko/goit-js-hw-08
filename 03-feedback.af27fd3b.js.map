{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAOMC,EAAOC,SAASC,cAAc,kBACpCC,QAAQC,IAAIJ,GACZ,IAAMK,EAAmB,uBAgCzB,WAII,GAAmB,OAFAC,aAAaC,QAAQF,GAGpC,OAWmBG,EAPTC,KAAKC,MAAMJ,aAAaC,QAAQF,IAQ9CL,EAAKW,SAASC,MAAMC,MAAQL,EAAQI,MACpCZ,EAAKW,SAASG,QAAQD,MAAQL,EAAQM,QAF1C,IAA2BN,EA7C3BO,GAEAf,EAAKgB,iBAAiB,SAAS,EAAAlB,EAAAmB,WAK/B,SAAkBC,GACd,IAAMN,EAAQM,EAAMC,cAAcR,SAASC,MAAMC,MAC3CC,EAAUI,EAAMC,cAAcR,SAASG,QAAQD,MACrDV,QAAQC,IAAIQ,EAAOE,GAeAM,EAbA,CACfR,QACAE,WAYRR,aAAae,QAAQhB,EAAkBI,KAAKa,UAAUF,IADtD,IAAuBA,IAvB2B,MAGlDpB,EAAKgB,iBAAiB,UA6CtB,SAAsBE,EAAOK,GACzBL,EAAMM,iBAENrB,QAAQC,IAAIK,KAAKC,MAAMJ,aAAaC,QAAQF,KAM5CC,aAAamB,WAAWpB,GACxBL,EAAKW,SAASC,MAAMC,MAAQ,GAC5Bb,EAAKW,SAASG,QAAQD,MAAQ,M","sources":["src/js/03-feedback.js"],"sourcesContent":["import { throttle } from 'lodash';\n\n// Відстежуй на формі подію input, і щоразу записуй у локальне сховище об'єкт з полями email і message, у яких зберігай поточні значення полів форми. Нехай ключем для сховища буде рядок \"feedback-form-state\".\n// Під час завантаження сторінки перевіряй стан сховища, і якщо там є збережені дані, заповнюй ними поля форми. В іншому випадку поля повинні бути порожніми.\n// Під час сабміту форми очищуй сховище і поля форми, а також виводь у консоль об'єкт з полями email, message та їхніми поточними значеннями.\n// Зроби так, щоб сховище оновлювалось не частіше, ніж раз на 500 мілісекунд. Для цього додай до проекту і використовуй бібліотеку lodash.throttle.\n\nconst form = document.querySelector(\".feedback-form\");\nconsole.log(form);\nconst LOCALSTORAGE_KEY = \"feedback-form-state\";\nlet parsedValue;\n\nupdauteInput();\n\nform.addEventListener(\"input\", throttle(getInput, 500));\n// autoCompleteValue(parsedValue);\n// console.log(parsedValue);\nform.addEventListener(\"submit\", onSabmitForm);\n\nfunction getInput(event) {\n    const email = event.currentTarget.elements.email.value;\n    const message = event.currentTarget.elements.message.value;\n    console.log(email, message);\n\n    const inputValue = {\n        email,\n        message,\n    }\n    // console.log(\"оновдюэьбся сховище\");\n    saveFormValue(inputValue);\n}\n\n// function getFeedback(getInput) {\n//     console.log(inputValue);\n//     return inputValue;\n// }\n\nfunction saveFormValue(inputValueEl) {\nlocalStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(inputValueEl));\n}\n\nfunction updauteInput() {\n\n    const savedValue = localStorage.getItem(LOCALSTORAGE_KEY);\n\n    if (savedValue === null) {\n        return\n    }\n\n    // parsedValue = JSON.parse(savedValue);\n    parsedValue = JSON.parse(localStorage.getItem(LOCALSTORAGE_KEY));\n    // console.log(parsedValue);\n    \n    autoCompleteValue(parsedValue);\n    // return parsedValue;\n}\n\nfunction autoCompleteValue(valueEl) {\n    form.elements.email.value = valueEl.email;\n    form.elements.message.value = valueEl.message;\n}\n\nfunction onSabmitForm(event, parsedValue) {\n    event.preventDefault();\n        // getFeedback(getInput);\n    console.log(JSON.parse(localStorage.getItem(LOCALSTORAGE_KEY)));\n    // console.log(parsedValue);\n    clinerLocStor();\n}\n\nfunction clinerLocStor() {\n    localStorage.removeItem(LOCALSTORAGE_KEY);\n    form.elements.email.value = \"\";\n    form.elements.message.value = \"\";\n}\n\n// return serializedState === null ? undefined : JSON.parse(serializedState);\n\n\n"],"names":["$1WSnx","parcelRequire","$b00c40859be242c5$var$form","document","querySelector","console","log","$b00c40859be242c5$var$LOCALSTORAGE_KEY","localStorage","getItem","valueEl","JSON","parse","elements","email","value","message","$b00c40859be242c5$var$updauteInput","addEventListener","throttle","event","currentTarget","inputValueEl","setItem","stringify","parsedValue","preventDefault","removeItem"],"version":3,"file":"03-feedback.af27fd3b.js.map"}